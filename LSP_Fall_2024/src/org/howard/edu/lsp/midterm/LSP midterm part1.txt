1a. The UserFitness class has low cohesion because it combines multiple unrelated responsibilities—tracking workouts, logging steps, managing nutrition, storing user information, and generating reports—into a single class. This lack of focus on a single task reduces maintainability and makes the class harder to manage or extend. Cohesion could be improved by dividing these responsibilities into separate, more focused classes.

1b. To improve cohesion, I would split the UserFitness class into more focused classes. A UserProfile class would handle user details like name, age, and weight, while a WorkoutTracker class would manage workout logs and calories burned. A separate StepTracker class would track daily steps, and a NutritionTracker class would log meals and calories consumed. Each class would focus on a single responsibility, making the design more maintainable and organized.

2. Student should be an abstract class because it provides shared state and behavior for all students, while allowing subclasses like FirstYear, SecondYear, and ThirdYear to define year-specific functionality. The removeThirdYears method is flawed because it modifies the list while iterating over it.

3. The BankAccount class is not well-encapsulated because its fields are public, allowing direct access. To improve encapsulation, the fields should be made private, and getter and setter methods should be used to control access and ensure that changes to the account's state follow proper business logic. This way, it prevents external code from changing sensitive data like balance and interest rate.

Source: https://learn.codesignal.com/preview/lessons/960/securing-javas-building-blocks-encapsulation-of-attributes-and-methods

4a. The current structure uses inheritance for trim levels, which makes trim levels static. Once a car is instantiated as a specific trim, its type is fixed, preventing dynamic changes to the trim level during runtime.

4b. To allow dynamic trim-level changes, refactor the design to use composition. Instead of using inheritance, create a TrimLevel interface and implement different trim levels as classes. The Car class should have a reference to a TrimLevel object and a setter method to change the trim level dynamically at runtime. This allows the car's trim to be updated without altering the car's class type.

5. Duplicating code across two classes creates several problems, such as increased maintenance overhead, reduced readability, and inconsistent behavior. Arthur Riel's heuristic advises against code duplication, promoting reuse instead. To solve this, I can apply inheritance if one class is a specialized version of the other, moving the shared functionality to a base class.


6. Placing database calls inside the Car and BankAccount classes leads to high coupling and violates the Single Responsibility Principle. Embedding database logic reduces flexibility and complicates testing, as it would require a live database for unit tests. A better approach is to use dedicated DAO or Repository classes to handle persistence, ensuring lower coupling and better maintainability.

Source: https://java-design-patterns.com/patterns/data-access-object/

7. To create a new class hierarchy using inheritance, several key conditions must be met. First, there should be a clear is-a relationship, meaning that the subclass is a specific type of the superclass. The superclass must also encapsulate common behavior and properties that are shared by all subclasses, avoiding code duplication. Additionally, the superclass should represent a stable concept that won't frequently change, adhering to the Open-Closed Principle. Subclasses should be able to substitute for the superclass without breaking functionality. Finally, the differences between subclasses should be minor, with significant variations better handled by composition rather than inheritance​

8.Inheritance establishes an is-a relationship where a subclass inherits behavior from a superclass, making it ideal for class hierarchies. Composition, however, uses a has-a relationship where a class contains objects of other classes, allowing for more flexible and dynamic behavior. You choose inheritance when there’s a clear hierarchical relationship, while composition is preferred for flexibility and to avoid tight coupling

Source:https://brightnetwork-technology-academy.github.io/curriculum/java/lessons/design_patterns/design_patterns/

9.Cohesion refers to how closely related and focused the responsibilities of a class or module are. High cohesion means that the class is focused on a single task or purpose, leading to better readability, maintainability, and easier testing. Low cohesion occurs when a class has many unrelated responsibilities, making the code harder to manage and understand. High cohesion is better for these reasons.

